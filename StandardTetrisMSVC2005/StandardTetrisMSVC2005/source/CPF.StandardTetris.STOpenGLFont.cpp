// All contents of this file written by Colin Fahey ( http://colinfahey.com )
// 2007 June 4 ; Visit web site to check for any updates to this file.



#define _CRT_SECURE_NO_DEPRECATE 
#define _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES 1



#include "CPF.StandardTetris.STOpenGLFont.h"


#include <stdio.h>   // vsprintf()
#include <stdarg.h>  // vsprintf()
#include <string.h>  // strlen()
#include <stdlib.h>  // malloc()
#include <malloc.h>  // malloc()
#include <windows.h>     // Necessary for OpenGL #include's
#include <gl\gl.h>       // OpenGL
#include <gl\glu.h>      // GLU library



namespace CPF
{
	namespace StandardTetris
	{



		// The following 128 x 128, 1-bit-per-pixel bitmap is
		// Courier New 10pt font, where each character is in a
		// 8x16 pixel cell.  The character grid is 16 x 8.
		// The first 96 chars are ASCII chars 32..127.
		// The last  32 chars are ASCII chars 192..223.
		unsigned char STOpenGLFont::Courier10FontBitmap[2048] =
		{
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x24,0x10,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,
			0x00,0x10,0x6c,0x24,0x38,0x40,0x00,0x20,0x08,0x40,0x10,0x00,0x00,0x00,0x00,0x08,
			0x00,0x10,0x6c,0x48,0x48,0xa0,0x1c,0x20,0x08,0x40,0x7c,0x10,0x00,0x00,0x00,0x10,
			0x00,0x10,0x48,0xfc,0x40,0x40,0x20,0x20,0x10,0x20,0x10,0x10,0x00,0x00,0x00,0x10,
			0x00,0x10,0x48,0x48,0x30,0x18,0x20,0x20,0x10,0x20,0x28,0x10,0x00,0x00,0x00,0x20,
			0x00,0x10,0x00,0x48,0x08,0xe0,0x30,0x00,0x10,0x20,0x28,0xfe,0x00,0xfc,0x00,0x20,
			0x00,0x00,0x00,0xfc,0x48,0x10,0x54,0x00,0x10,0x20,0x00,0x10,0x00,0x00,0x00,0x40,
			0x00,0x00,0x00,0x48,0x70,0x28,0x48,0x00,0x10,0x20,0x00,0x10,0x30,0x00,0x30,0x40,
			0x00,0x10,0x00,0x90,0x10,0x10,0x3c,0x00,0x10,0x20,0x00,0x10,0x20,0x00,0x30,0x80,
			0x00,0x00,0x00,0x90,0x10,0x00,0x00,0x00,0x08,0x40,0x00,0x00,0x60,0x00,0x00,0x80,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x08,0x40,0x00,0x00,0x40,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x78,0x10,0x70,0x70,0x18,0x7c,0x1c,0xfc,0x78,0x78,0x00,0x00,0x00,0x00,0x00,0x38,
			0x84,0x70,0x88,0x88,0x28,0x40,0x20,0x84,0x84,0x84,0x00,0x00,0x04,0x00,0x80,0x44,
			0x84,0x10,0x08,0x08,0x48,0x40,0x40,0x04,0x84,0x84,0x30,0x30,0x18,0xfc,0x60,0x04,
			0x84,0x10,0x10,0x30,0x48,0x78,0x78,0x08,0x78,0x84,0x30,0x30,0x20,0x00,0x10,0x04,
			0x84,0x10,0x20,0x08,0xfc,0x04,0x44,0x08,0x84,0x7c,0x00,0x00,0xc0,0xfc,0x0c,0x08,
			0x84,0x10,0x40,0x08,0x08,0x04,0x44,0x10,0x84,0x04,0x00,0x00,0x20,0x00,0x10,0x10,
			0x84,0x10,0x88,0x88,0x08,0x84,0x44,0x10,0x84,0x08,0x30,0x30,0x18,0x00,0x60,0x00,
			0x78,0x7c,0xf8,0x70,0x1c,0x78,0x38,0x10,0x78,0xf0,0x30,0x60,0x04,0x00,0x80,0x30,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x88,0x30,0xf8,0x3c,0xf0,0xfc,0xfc,0x3c,0xee,0x7c,0x3c,0xee,0xe0,0xee,0xce,0x38,
			0x88,0x10,0x44,0x44,0x48,0x44,0x44,0x44,0x44,0x10,0x08,0x44,0x40,0x6c,0xc4,0x44,
			0x98,0x28,0x44,0x80,0x44,0x50,0x50,0x80,0x44,0x10,0x08,0x48,0x40,0x6c,0xa4,0x82,
			0xa8,0x28,0x78,0x80,0x44,0x70,0x70,0x80,0x7c,0x10,0x08,0x50,0x40,0x54,0xa4,0x82,
			0xa8,0x28,0x44,0x80,0x44,0x50,0x50,0x8e,0x44,0x10,0x88,0x70,0x40,0x54,0x94,0x82,
			0x98,0x38,0x44,0x80,0x44,0x40,0x40,0x84,0x44,0x10,0x88,0x48,0x44,0x44,0x94,0x82,
			0x80,0x44,0x44,0x44,0x48,0x44,0x40,0x44,0x44,0x10,0x88,0x44,0x44,0x44,0x8c,0x44,
			0x88,0xee,0xf8,0x38,0xf0,0xfc,0xe0,0x38,0xee,0x7c,0x70,0xe6,0xfc,0xee,0xcc,0x38,
			0x70,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x20,0x00,
			0xf8,0x38,0xf8,0x74,0xfe,0xee,0xce,0xee,0xee,0xee,0x7c,0x38,0x80,0xe0,0x20,0x00,
			0x44,0x44,0x44,0x8c,0x92,0x44,0x84,0x44,0x44,0x44,0x44,0x20,0x40,0x20,0x50,0x00,
			0x44,0x82,0x44,0x80,0x10,0x44,0x84,0x44,0x28,0x28,0x08,0x20,0x40,0x20,0x88,0x00,
			0x44,0x82,0x44,0x78,0x10,0x44,0x48,0x54,0x10,0x28,0x10,0x20,0x20,0x20,0x00,0x00,
			0x78,0x82,0x78,0x04,0x10,0x44,0x48,0x54,0x10,0x10,0x10,0x20,0x20,0x20,0x00,0x00,
			0x40,0x82,0x48,0x04,0x10,0x44,0x48,0x54,0x28,0x10,0x20,0x20,0x20,0x20,0x00,0x00,
			0x40,0x44,0x44,0xc4,0x10,0x44,0x30,0x54,0x44,0x10,0x44,0x20,0x10,0x20,0x00,0x00,
			0xe0,0x38,0xe2,0xb8,0x38,0x38,0x30,0x28,0xee,0x38,0x7c,0x20,0x10,0x20,0x00,0x00,
			0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x10,0x20,0x00,0xfe,//"_" new bottom
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x00,0xe0,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,// "_"old bottom
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x20,0x00,0x80,0x00,0x0c,0x00,0x1c,0x00,0xc0,0x10,0x10,0xc0,0x30,0x00,0x00,0x00,
			0x10,0x00,0x80,0x00,0x04,0x00,0x20,0x00,0x40,0x00,0x00,0x40,0x10,0x00,0x00,0x00,
			0x00,0x78,0xb8,0x74,0x74,0x78,0xfc,0x76,0x58,0x70,0x78,0x5e,0x10,0xa4,0xd8,0x78,
			0x00,0x84,0xc4,0x8c,0x8c,0x84,0x20,0x8c,0x64,0x10,0x08,0x48,0x10,0xda,0x64,0x84,
			0x00,0x7c,0x84,0x80,0x84,0xfc,0x20,0x84,0x44,0x10,0x08,0x70,0x10,0x92,0x44,0x84,
			0x00,0x84,0x84,0x80,0x84,0x80,0x20,0x84,0x44,0x10,0x08,0x50,0x10,0x92,0x44,0x84,
			0x00,0x8c,0xc4,0x84,0x8c,0x80,0x20,0x8c,0x44,0x10,0x08,0x48,0x10,0x92,0x44,0x84,
			0x00,0x76,0xb8,0x78,0x76,0x7c,0xfc,0x74,0xee,0x7c,0x08,0xce,0x7c,0xda,0xee,0x78,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x04,0x00,0x00,0x08,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x78,0x00,0x00,0xf0,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x20,0x40,0x00,0xfc,
			0x00,0x00,0x00,0x00,0x40,0x00,0x00,0x00,0x00,0x00,0x00,0x20,0x20,0x20,0x00,0x04,
			0xd8,0x76,0xdc,0x7c,0xf8,0xcc,0xce,0xee,0xcc,0xee,0x7c,0x20,0x20,0x20,0x00,0x04,
			0x64,0x8c,0x60,0x84,0x40,0x44,0x84,0x44,0x48,0x44,0x48,0x20,0x20,0x20,0x64,0x04,
			0x44,0x84,0x40,0x78,0x40,0x44,0x48,0x54,0x30,0x44,0x10,0x40,0x20,0x10,0x98,0x04,
			0x44,0x84,0x40,0x04,0x40,0x44,0x48,0x54,0x30,0x28,0x20,0x20,0x20,0x20,0x00,0x04,
			0x44,0x8c,0x40,0x84,0x44,0x4c,0x30,0x54,0x48,0x28,0x44,0x20,0x20,0x20,0x00,0x04,
			0x78,0x74,0xf8,0xf8,0x38,0x36,0x30,0x28,0xcc,0x10,0x7c,0x20,0x20,0x20,0x00,0xfc,
			0x40,0x04,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x10,0x00,0x10,0x20,0x40,0x00,0x00,
			0xe0,0x0e,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x70,0x00,0x00,0x20,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xfe,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x30,0x00,0xee,0x20,0x7c,0x48,0x78,0x70,0x00,0x00,0x00,0x78,0x00,
			0x00,0x00,0x10,0x48,0x84,0x44,0x20,0x44,0x00,0x84,0x10,0x00,0x00,0x00,0x84,0x00,
			0x00,0x10,0x38,0x40,0x78,0x28,0x20,0xe0,0x00,0x3a,0x70,0x00,0x00,0x00,0x7a,0x00,
			0x00,0x00,0x44,0x40,0x48,0x7c,0x20,0x90,0x00,0x42,0x78,0x24,0x00,0x00,0x2a,0x00,
			0x00,0x00,0x40,0xf0,0x48,0x10,0x00,0xcc,0x00,0x42,0x00,0x48,0xfc,0xfc,0x32,0x00,
			0x00,0x10,0x44,0x20,0x78,0x7c,0x00,0x24,0x00,0x3a,0x00,0x90,0x04,0x00,0x7a,0x00,
			0x00,0x10,0x38,0x44,0x84,0x10,0x20,0x1c,0x00,0x84,0x00,0x48,0x04,0x00,0x84,0x00,
			0x00,0x10,0x10,0xfc,0x00,0x38,0x20,0x88,0x00,0x78,0x00,0x24,0x04,0x00,0x78,0x00,
			0x00,0x10,0x00,0x00,0x00,0x00,0x20,0xf8,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x10,0x00,0x00,0x00,0x00,0x20,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x30,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x48,0x10,0x30,0x78,0x10,0x00,0x7e,0x00,0x00,0x30,0x30,0x00,0x80,0x80,0xc0,0x00,
			0x48,0x10,0x50,0x18,0x20,0x00,0x94,0x00,0x00,0x10,0x48,0x00,0x80,0x84,0xc2,0x00,
			0x30,0x10,0x20,0x08,0x00,0x98,0x94,0x00,0x00,0x10,0x48,0x00,0x82,0x88,0x44,0x30,
			0x00,0xfe,0x78,0x78,0x00,0x88,0x94,0x30,0x00,0x38,0x30,0x90,0x8c,0xf0,0xc8,0x00,
			0x00,0x10,0x00,0x00,0x00,0x88,0x74,0x30,0x00,0x00,0x00,0x48,0xfc,0x4e,0x3c,0x20,
			0x00,0x10,0x00,0x00,0x00,0x88,0x14,0x00,0x00,0x00,0x00,0x24,0x54,0x82,0x54,0x40,
			0x00,0x10,0x00,0x00,0x00,0x98,0x14,0x00,0x00,0x00,0x00,0x48,0x1e,0x04,0x9e,0x80,
			0x00,0xfe,0x00,0x00,0x00,0xec,0x14,0x00,0x10,0x00,0x00,0x90,0x0e,0x0e,0x0e,0x80,
			0x00,0x00,0x00,0x00,0x00,0x80,0x76,0x00,0x08,0x00,0x00,0x00,0x00,0x00,0x00,0x88,
			0x00,0x00,0x00,0x00,0x00,0x80,0x00,0x00,0x38,0x00,0x00,0x00,0x00,0x00,0x00,0x70,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
			0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00
		};





		GLuint  STOpenGLFont::gFontTextureName = 0;




		void STOpenGLFont::FontMakeTexture()
		{
			unsigned char *pBuffer = NULL;
			unsigned char val;
			int i, j, k;

			pBuffer = (unsigned char *) malloc ( 128 * 128 * 4 );
			if (0 == pBuffer) return; // ERROR: Could not allocate memory


			// Fill in buffer with RGBA32 version of font pixels
			for ( j=0; j<128; j++ )
			{
				for ( i=0; i<128; i++ )
				{
					k = 4 * ((128*(127-j)) + i);
					val = Courier10FontBitmap[ (16*j) + (i>>3) ];
					val <<= (i & 0x7); // 0..7
					if (val & 0x80)
					{
						// Opaque White
						// (NOTE: Setting glColor4f(r,g,b,a) will modulate!
						//   so you can get whatever color you want!)
						pBuffer[ k + 0 ] = 255; // R
						pBuffer[ k + 1 ] = 255; // G
						pBuffer[ k + 2 ] = 255; // B
						pBuffer[ k + 3 ] = 255; // A
					}
					else
					{
						// Transparent
						pBuffer[ k + 0 ] =   0; // R
						pBuffer[ k + 1 ] =   0; // G
						pBuffer[ k + 2 ] =   0; // B
						pBuffer[ k + 3 ] =   0; // A
					}
				}
			}


			// Create an OpenGL texture out of this.
			glGenTextures( 1, &gFontTextureName );
			glBindTexture( GL_TEXTURE_2D,  gFontTextureName );

			glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_NEAREST );
			glTexParameteri( GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_NEAREST );
			glTexImage2D( GL_TEXTURE_2D, 0, GL_RGBA, 128, 128, 0, GL_RGBA, GL_UNSIGNED_BYTE, pBuffer );

			free( pBuffer );
		}




		void STOpenGLFont::FontPrint( float x, float y, const char *format, ... )
		{
			va_list       ap;          // Argument pointer
			unsigned char s[1024];     // Output string
			int n, i, j, k, index;
			float u, v;
			float du, dv;

			if (format == (char *)0)
				return;


			// Format the string
			va_start(ap, format);
			vsprintf((char *)s, format, ap);
			va_end(ap);

			du = (0.0625f);
			dv = (0.1250f);

			n = (int) strlen((const char *)s);

			if (n>0)
			{
				if (0 == gFontTextureName) STOpenGLFont::FontMakeTexture();
				glEnable(GL_BLEND);
				glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA);
				////glAlphaFunc(GL_GREATER,0.1);
				////glEnable(GL_ALPHA_TEST);
				glEnable( GL_TEXTURE_2D );
				glBindTexture( GL_TEXTURE_2D,  gFontTextureName );
				glBegin(GL_TRIANGLES);
			}

			for ( k=0; k<n; k++ )
			{
				index = (int)(s[k]);
				if (index>=192) index -= 96;
				else if (index>=32) index-=32;
				else if (index<32)  index=0;
				if (index>=128) index=0;

				i = (index & 0xf);
				j = (7 - (index >> 4));

				u = du * ((float)i);
				v = dv * ((float)j);

				glTexCoord2f( u, v );
				glVertex3f  ( x + FONT_WIDTH*(float)k,     y - FONT_HEIGHT, 0.0f );
				glTexCoord2f( (u+du), v );
				glVertex3f  ( x + FONT_WIDTH*(float)(k+1), y - FONT_HEIGHT, 0.0f );
				glTexCoord2f( u, (v+dv) ); 
				glVertex3f  ( x + FONT_WIDTH*(float)k,     y,               0.0f );

				glTexCoord2f( u, (v+dv) ); 
				glVertex3f  ( x + FONT_WIDTH*(float)k,     y,               0.0f );
				glTexCoord2f( (u+du), v );
				glVertex3f  ( x + FONT_WIDTH*(float)(k+1), y - FONT_HEIGHT, 0.0f );
				glTexCoord2f( (u+du), (v+dv) );
				glVertex3f  ( x + FONT_WIDTH*(float)(k+1), y,               0.0f );
			}

			if (n>0)
			{
				glEnd();
				glDisable( GL_TEXTURE_2D );
				glDisable(GL_BLEND);
			}
		}




	}
}


